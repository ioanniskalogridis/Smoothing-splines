require(Matrix)
require(fda)
require(MASS)
require(SparseM)

quan.smsp <- function(x, y, alpha = 0.5, tuning = 1e-04, maxit = 50, m = 2, 
                      lambda = NULL, interval = c(1e-05, 1)){
  
  rho.quan <- function(x, alpha = 0.5, tuning = 1e-04) ifelse(abs(x) <= tuning, ifelse(x <= tuning & x >=0, alpha*x^2/tuning, (1-alpha)*x^2/tuning ) , 0.5*abs(x) + 0.5*(2*alpha-1)*x  )
  psi.quan <-  function(x, alpha = 0.5, tuning = 1e-04) ifelse(abs(x) <= tuning, ifelse(x <= tuning & x >=0, 2*alpha*x/tuning, 2*(1-alpha)*x/tuning ) , 0.5*sign(x)+0.5*(2*alpha-1) )
  weights.quan <- function(x, alpha = 0.5, tuning = 1e-04) ifelse(abs(x) <= tuning, ifelse(x <= tuning & x >=0, 2*alpha/tuning, 2*(1-alpha)/tuning ), psi.quan(x, alpha, tuning)/x)
  
  quan.step <- function(X, y, tuning, alpha,  tol = 1e-08, lambda, Pen.matrix, resids.in, maxit = 50){
    
    ic = 0
    istop = 0
    
    while(istop == 0 & ic <= maxit){
      ic = ic + 1
      weights.prelim <- weights.quan(resids.in, alpha = alpha, tuning = tuning)
      X.s <- as.matrix(scale(t(X), center = FALSE, scale = 1/weights.prelim))
      M1 <-  X.s%*%X + 2*lambda*Pen.matrix
      M2 <- X.s%*%as.matrix(y)
      v1 = SparseM::solve( M1, M2)
      # v1 = ginv(M1)%*%M2
      resids1 <- as.vector(y-X%*%v1)
      check = max( abs(resids1-resids.in)) 
      if(check < tol){istop =1}
      resids.in <- resids1
    }
    weights1 = as.vector(weights.quan(resids1, alpha = alpha, tuning = tuning) )
    fitted.values = as.vector(X%*%v1)
    resids = y - fitted.values
    # hat.values = diag(X%*%SparseM::solve(M1, X.s))
    hat.values = sum( t(SparseM::solve(M1, X.s)) * X )/length(y)
    
    return(list(resids = resids, beta.hat = v1, hat.values = hat.values, 
                weights = weights1, fitted = fitted.values, ic = ic, check = check ) )
  }
  
  n <- length(y)
  
  x.t <- (x-min(x))/(max(x)-min(x))
  
  b.basis <- create.bspline.basis(rangeval = c(0, 1), breaks = unique(x.t), norder = 2*m)
  b.basis.e <- eval.basis(b.basis, x.t)
  
  if(m==1){
    P <- diff(diag(n), differences = 1)
    Pen.matrix <- t(P)%*%diag(1/(diff(x, differences = 1)))%*%P
  } else {
    Pen.matrix <- bsplinepen(b.basis, Lfdobj = m) }
  
  fit.in <- smooth.spline(x, y)
  resids.in <- y - predict(fit.in, x.t)$y
  GCV <- function(lambda){
    fit.r <- quan.step(X = b.basis.e,  y = y, lambda = lambda, Pen.matrix = Pen.matrix,
                       alpha = alpha, tuning = tuning, resids.in = resids.in, maxit = maxit)
    GCV.scores <-  mean( fit.r$weights*((fit.r$resids)^2) /((1-fit.r$hat.values)^2) )
    return(GCV.scores)
  }
  
  lambda1 <- ifelse(is.null(lambda), optimize(f = GCV, interval = interval)$minimum, lambda)
  fit.rf <- quan.step(X = b.basis.e,  y = y, lambda = lambda1, Pen.matrix = Pen.matrix,
                      alpha = alpha, tuning = tuning, resids.in = resids.in, maxit = maxit)
  
  mu <- as.vector(b.basis.e%*%fit.rf$beta.hat)
  
  return(list(x = x, mu = mu, weights = fit.rf$weights, Pen.matrix = Pen.matrix, fitted = fit.rf$fitted, 
              lambda = lambda1, ic = fit.rf$ic, resids = fit.rf$resids))
}
